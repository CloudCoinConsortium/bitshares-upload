require 'net/http'
class WelcomeController < ApplicationController
  # GET  /welcome/index
  def index
  end

  # GET  /welcome/completed
  def completed
    # Get receipt and email from params
    receipt_id = params["receipt_id"]
    account_email = params["account_email"]

    # Check if receipt and email params are blank
    if receipt_id.blank? || account_email.blank?
      redirect_to welcome_index_url, alert: "Something went wrong while checking the receipt. Please try again."
      return
    end

    # get the JSON response from the Cloudcoin Get Receipt Service
    response_json = get_receipt_json(receipt_id, account_email)

    # Check if the response is blank
    if response_json.blank?
      # If the response is blank, redirect to index
      redirect_to welcome_index_url, alert: "Something went wrong while checking the receipt. Please try again."
      return
    end
      
    # get the status of the receipt
    status = response_json["status"]
    
    # If the status is fail...
    if (status == "fail")
      # Redirect to index
      redirect_to welcome_index_url, alert: response_json["message"]
      return
    end
    
    # status is not fail...
    # Extract data from JSON
    @receipt_id = response_json["receipt_id"]
    @checked_at = response_json["time"]
    @total_authentic = response_json["total_authentic"]
    @total_fracked = response_json["total_fracked"]
    @total_counterfeit = response_json["total_counterfeit"]
    @total_lost = response_json["total_lost"]
    @coins = response_json["receipt"].compact
  end

  # POST /welcome/upload
  # No View
  def upload
    # get account
    account_email = params["email"]

    # get uploaded file
    uploaded_io = params["cloud_coin_file"]

    # check if there was no email
    if account_email.blank?
      redirect_to welcome_index_url, alert: "Email is missing. Please try again."
      return
    end

    # check if there was no file selected
    if uploaded_io == nil || uploaded_io == ""
      redirect_to welcome_index_url, alert: "Stack file is missing. Please try again."
      return
    end

    # TODO: Generate a more secure filename
    # Generate a file name that will be unique YYYYMMSSuploadedfile.stack
    # Eg. 20180616CloudCoins.stack
    generated_file_name = Time.now.strftime("%Y%m%d%H%M%S") + uploaded_io.original_filename

    # TODO: check if the file already exists
    
    # Save the uploaded file to public/uploads
    File.open(Rails.root.join('public', 'uploads', generated_file_name), 'wb') do |file|
      file.write(uploaded_io.read)
    end
    
    # Get the file content
    uploaded_file_content = File.read(Rails.root.join('public', 'uploads', generated_file_name))

    # This will hold the receipt generated by Deposit one stack
    receipt = ""

    # https://ruby-doc.org/stdlib-2.5.1/libdoc/net/http/rdoc/Net/HTTP.html
    # http://www.rubyinside.com/nethttp-cheat-sheet-2940.html
    # We will be posting to the following URI
    uri = URI.parse("https://bank.cloudcoin.global/service/deposit_one_stack")
    
    # Response
    res = ""
    Net::HTTP.start(uri.host, uri.port, :use_ssl => true) do |http|
      req = Net::HTTP::Post.new(uri)
      req.set_form_data("account" => "CloudCoin@Protonmail.com", "stack" => uploaded_file_content)
      res = http.request(req)
      # res.code should be 200
    end


    if (res.is_a?(Net::HTTPSuccess))
      # if cloudcoin deposit one stack service was able to
      # process the request
      # 
      # Parse the JSON response
      response_json = JSON.parse(res.body)
      
      # get the status from the JSON response
      status = response_json["status"]
      
      if (status == "error")
        # if the status is "error", redirect to index
        error_msg = response_json["message"]
        if error_msg.blank?
          error_msg = "Uploaded file is not a valid stack file or there was an unknown error. Please try again."
        end
        redirect_to welcome_index_url, notice: error_msg
        return
      else
        # status should be "importing"
        # get the receipt id from the response and redirect to review
        receipt = response_json["receipt"]
        asdf
        redirect_to controller: "welcome", action: "review", file_name: generated_file_name, receipt: receipt
      end
    else
      # if uploaded file is NOT a cloudcoin stack file
      redirect_to welcome_index_url, alert: "Uploaded file is not a valid stack file or there was an unknown error. Please try again."
    end
  end

  private

  # Uses Cloudcoin Get Receipt Service
  # https://bank.cloudcoin.global/service/get_receipt?rn=receipt_id&account=account_email
  def get_receipt_json(receipt_id, account_email)

    # Check Receipt using Get Receipt Service
    uri = URI("https://bank.cloudcoin.global/service/get_receipt")
    res = Net::HTTP.post_form(uri, "rn" => receipt_id, 
      "account" => account_email)
    
    # res.code should be 200
    
    if (res.is_a?(Net::HTTPSuccess))

      # Receive the JSON response and parse it
      response_json = JSON.parse(res.body)
      return response_json
    else
      return nil
    end
  end
end
